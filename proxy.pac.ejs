const proxy = 'SOCKS5 127.0.0.1:7070'

const hostRulesMap = <%- JSON.stringify(hostRulesMap, null, 2) %>
const urlRules = <%- JSON.stringify(urlRules, null, 2) %>
const regRules = <%- JSON.stringify(regRules, null, 2) %>
const whiteHostRules = <%- JSON.stringify(whiteHostRules , null, 2) %>
const whiteUrlRules = <%- JSON.stringify(whiteUrlRules , null, 2) %>
const whiteRegRules = <%- JSON.stringify(whiteRegRules , null, 2) %>

function FindProxyForURL(url, host) {

    // if (shExpMatchRules(host, hostRules)
    //   || shExpMatchRules(url, urlRules)
    //   || matchRegRules(url, regRules)
    //   || matchRegRules(host, regRules)) {
    //   // return [proxy, 'DIRECT'].join(';')
    //   return proxy
    // }

    if (shExpMatchRules(host, whiteHostRules)
      || shExpMatchRules(url, whiteUrlRules)) {

      return 'DIRECT'
    }

    if (matchHost(host, hostRulesMap)) {
      return [proxy, 'DIRECT'].join(';')
    }

    return 'DIRECT'
}

function matchHost (host, map) {
  const suffix = host.split('.').reverse()[0]
  const collection = map[suffix]

  if (!collection) {
    return false
  }

  const letter = host.split('.').reverse()[1][0]
  const ruleList = Array.isArray(collection) ? collection : collection[letter]

  if (!ruleList || !ruleList.length) {
    return false
  }

  return shExpMatchRules(host, ruleList)
}

function shExpMatchRules (str, rules) {

  for (let i = 0, rule; rule = rules[i++];) {
    if (shExpMatch(str, rule)) {
      return true
    }
  }

  return false
}

function matchRegRules (str, rules) {

  for (let i = 0, reg; reg = rules[i++];) {
    reg = new RegExp(reg)
    if (reg.test(str)) {
      return true
    }
  }

  return false
}
